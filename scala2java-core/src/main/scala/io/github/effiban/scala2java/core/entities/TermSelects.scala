package io.github.effiban.scala2java.core.entities

import scala.meta.XtensionQuasiquoteTerm

object TermSelects {

  // Please maintain alphabetical order in each section

  final val JavaLang = q"java.lang"

  final val JavaCompletableFuture = q"java.util.concurrent.CompletableFuture"
  final val JavaEither = q"io.vavr.control.Either"
  final val JavaIllegalArgumentException = q"java.lang.IllegalArgumentException"
  final val JavaIllegalStateException = q"java.lang.IllegalStateException"
  final val JavaIntStream = q"java.util.stream.IntStream"
  final val JavaList = q"java.util.List"
  final val JavaMap = q"java.util.Map"
  final val JavaPrint = q"java.lang.System.out.print"
  final val JavaPrintln = q"java.lang.System.out.println"
  final val JavaOptional = q"java.util.Optional"
  final val JavaSet = q"java.util.Set"
  final val JavaStream = q"java.util.stream.Stream"
  final val JavaTry = q"io.vavr.control.Try"

  final val ScalaPredef = q"scala.Predef"

  final val ScalaArray = q"scala.Array"
  final val ScalaArraySeq = q"scala.collection.immutable.ArraySeq"
  final val ScalaBigDecimal = q"scala.math.BigDecimal"
  final val ScalaBigInt = q"scala.math.BigInt"
  final val ScalaBoolean = q"scala.Boolean"
  final val ScalaByte = q"scala.Byte"
  final val ScalaChar = q"scala.Char"
  final val ScalaDouble = q"scala.Double"
  final val ScalaEither = q"scala.util.Either"
  final val ScalaEquiv = q"scala.math.Equiv"
  final val ScalaFailure = q"scala.util.Failure"
  final val ScalaFloat = q"scala.Float"
  final val ScalaFractional = q"scala.math.Fractional"
  final val ScalaFuture = q"scala.concurrent.Future"
  final val ScalaHashMap = q"scala.collection.immutable.HashMap"
  final val ScalaHashSet = q"scala.collection.immutable.HashSet"
  final val ScalaIndexedSeq = q"scala.collection.immutable.IndexedSeq"
  final val ScalaInt = q"scala.Int"
  final val ScalaIntegral = q"scala.math.Integral"
  final val ScalaIterable = q"scala.collection.Iterable"
  final val ScalaIterator = q"scala.collection.Iterator"
  final val ScalaLazyList = q"scala.collection.immutable.LazyList"
  final val ScalaLinearSeq = q"scala.collection.immutable.LinearSeq"
  final val ScalaListMap = q"scala.collection.immutable.ListMap"
  final val ScalaListSet = q"scala.collection.immutable.ListSet"
  final val ScalaLeft = q"scala.util.Left"
  final val ScalaList = q"scala.collection.immutable.List"
  final val ScalaLong = q"scala.Long"
  final val ScalaMap = q"scala.collection.immutable.Map"
  final val ScalaNil = q"scala.collection.immutable.Nil"
  final val ScalaNone = q"scala.None"
  final val ScalaNumeric = q"scala.math.Numeric"
  final val ScalaOption = q"scala.Option"
  final val ScalaOrdered = q"scala.math.Ordered"
  final val ScalaOrdering = q"scala.math.Ordering"
  final val ScalaPartialOrdering = q"scala.math.PartialOrdering"
  final val ScalaPrint = q"scala.Predef.print"
  final val ScalaPrintf = q"scala.Predef.printf"
  final val ScalaPrintln = q"scala.Predef.println"
  final var ScalaRange = q"scala.collection.immutable.Range"
  final val ScalaRight = q"scala.util.Right"
  final val ScalaShort = q"scala.Short"
  final val ScalaSeq = q"scala.collection.immutable.Seq"
  final val ScalaSet = q"scala.collection.immutable.Set"
  final val ScalaSome = q"scala.Some"
  final val ScalaSortedMap = q"scala.collection.immutable.SortedMap"
  final val ScalaSortedSet = q"scala.collection.immutable.SortedSet"
  final val ScalaStream = q"scala.collection.immutable.Stream"
  final var ScalaStringBuilder = q"scala.collection.mutable.StringBuilder"
  final val ScalaSuccess = q"scala.util.Success"
  final val ScalaTreeMap = q"scala.collection.immutable.TreeMap"
  final val ScalaTreeSet = q"scala.collection.immutable.TreeSet"
  final val ScalaTry = q"scala.util.Try"
  final val ScalaVector = q"scala.collection.immutable.Vector"
}
